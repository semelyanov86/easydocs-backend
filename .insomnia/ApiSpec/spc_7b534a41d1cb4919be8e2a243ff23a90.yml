_id: spc_7b534a41d1cb4919be8e2a243ff23a90
type: ApiSpec
parentId: wrk_44747ddeeadc4bb494f6c1061f8f94e1
modified: 1693035059872
created: 1692631095783
fileName: EasyDocs
contents: >-
  openapi: 3.0.0

  info:
    description: "This is rest api for EasyDocs service. This is an electronic DMS service for home usage or for small business."
    version: 1.0.0
    title: EasyDocs
    termsOfService: https://sergeyem.ru/
    contact:
      email: se@sergeyem.ru
    license:
      name: Apache 2.0
      url: http://www.apache.org/licenses/LICENSE-2.0.html
  tags:
    - name: user
      description: Operations about user
    - name: group
      description: Working with list of groups
    - name: folder
      description: Operation with folders. Each document should be attached to folder.
  paths:
    /groups:
      get:
        tags:
          - group
        summary: Get all groups
        description: Allows you to get all groups, registered in system
        operationId: getAllGroups
        security:
          - bearerAuth: []
        responses:
          "200":
            description: successful operation
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: "#/components/schemas/Group"
    "/groups/{groupId}":
      get:
        tags:
          - group
        summary: Find group by ID
        description: Returns a single group
        operationId: getGroupById
        security:
          - bearerAuth: []
        parameters:
          - name: groupId
            in: path
            description: ID of group to return
            required: true
            schema:
              type: integer
              format: int64
        responses:
          "200":
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Group"
          "400":
            description: Invalid ID supplied
          "404":
            description: Group not found
    /folders:
      get:
        tags:
          - folder
        summary: Get all folders
        description: Allows you to get all folders with its children
        operationId: getAllFolders
        security:
          - bearerAuth: []
        responses:
          "200":
            description: successful operation
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: "#/components/schemas/Folder"
      post:
        tags:
          - folder
        summary: Create new folder
        description: "Create new folder by passing folder attributes. Returns new object with its children."
        operationId: addFolder
        security:
          - bearerAuth: []
        requestBody:
          $ref: "#/components/requestBodies/Folder"
        responses:
          "201":
            description: successful operation
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      $ref: "#/components/schemas/Folder"
          "422":
            description: Invalid input
    "/folders/{folderId}":
      get:
        tags:
          - folder
        summary: Find folder by ID
        description: Returns a single group
        operationId: getFolderById
        security:
          - bearerAuth: []
        parameters:
          - name: folderId
            in: path
            description: ID of folder to return
            required: true
            schema:
              type: integer
              format: int64
        responses:
          "200":
            description: successful operation
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      $ref: "#/components/schemas/Folder"
                      
          "400":
            description: Invalid ID supplied
          "404":
            description: Group not found
      put:
        tags:
          - folder
        summary: Updates a folder with data
        description: "Fully update of folder with only data you need"
        operationId: updateFolder
        security:
          - bearerAuth: []
        parameters:
          - name: folderId
            in: path
            description: ID of folder that needs to be updated
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
                schema:
                  $ref: "#/components/schemas/Folder"
        responses:
          "201":
            description: successful operation
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      $ref: "#/components/schemas/Folder"
          "422":
            description: Invalid input
      delete:
        tags:
          - folder
        summary: Delete a folder
        description: "Delete a folder if it has no subfolders and documents. Returns no content"
        operationId: deleteFolder
        security:
          - bearerAuth: []
        parameters:
          - name: folderId
            in: path
            description: Folder id to delete
            required: true
            schema:
              type: integer
              format: int64
        responses:
          "204":
            description: No Content
          "400":
            description: Invalid ID supplied
          "404":
            description: Folder not found
          "422":
            description: Folder has subfolders
    /pet:
      post:
        tags:
          - pet
        summary: Add a new pet to the store
        description: ""
        operationId: addPet
        requestBody:
          $ref: "#/components/requestBodies/Pet"
        responses:
          "405":
            description: Invalid input
      put:
        tags:
          - pet
        summary: Update an existing pet
        description: ""
        operationId: updatePet
        requestBody:
          $ref: "#/components/requestBodies/Pet"
        responses:
          "400":
            description: Invalid ID supplied
          "404":
            description: Pet not found
          "405":
            description: Validation exception
    /pet/findByStatus:
      get:
        tags:
          - pet
        summary: Finds Pets by status
        description: Multiple status values can be provided with comma separated strings
        operationId: findPetsByStatus
        parameters:
          - name: status
            in: query
            description: Status values that need to be considered for filter
            required: true
            explode: true
            schema:
              type: array
              items:
                type: string
                enum:
                  - available
                  - pending
                  - sold
                default: available
        responses:
          "200":
            description: successful operation
            content:
              application/xml:
                schema:
                  type: array
                  items:
                    $ref: "#/components/schemas/Pet"
              application/json:
                schema:
                  type: array
                  items:
                    $ref: "#/components/schemas/Pet"
          "400":
            description: Invalid status value
    /pet/findByTags:
      get:
        tags:
          - pet
        summary: Finds Pets by tags
        description: Multiple tags can be provided with comma separated strings. Use tag1,
          tag2, tag3 for testing.
        operationId: findPetsByTags
        parameters:
          - name: tags
            in: query
            description: Tags to filter by
            required: true
            explode: true
            schema:
              type: array
              items:
                type: string
        responses:
          "200":
            description: successful operation
            content:
              application/xml:
                schema:
                  type: array
                  items:
                    $ref: "#/components/schemas/Pet"
              application/json:
                schema:
                  type: array
                  items:
                    $ref: "#/components/schemas/Pet"
          "400":
            description: Invalid tag value
        deprecated: true
    "/pet/{petId}":
      get:
        tags:
          - pet
        summary: Find pet by ID
        description: Returns a single pet
        operationId: getPetById
        parameters:
          - name: petId
            in: path
            description: ID of pet to return
            required: true
            schema:
              type: integer
              format: int64
        responses:
          "200":
            description: successful operation
            content:
              application/xml:
                schema:
                  $ref: "#/components/schemas/Pet"
              application/json:
                schema:
                  $ref: "#/components/schemas/Pet"
          "400":
            description: Invalid ID supplied
          "404":
            description: Pet not found
      post:
        tags:
          - pet
        summary: Updates a pet in the store with form data
        description: ""
        operationId: updatePetWithForm
        parameters:
          - name: petId
            in: path
            description: ID of pet that needs to be updated
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/x-www-form-urlencoded:
              schema:
                type: object
                properties:
                  name:
                    description: Updated name of the pet
                    type: string
                  status:
                    description: Updated status of the pet
                    type: string
        responses:
          "405":
            description: Invalid input
      delete:
        tags:
          - pet
        summary: Deletes a pet
        description: ""
        operationId: deletePet
        parameters:
          - name: api_key
            in: header
            required: false
            schema:
              type: string
          - name: petId
            in: path
            description: Pet id to delete
            required: true
            schema:
              type: integer
              format: int64
        responses:
          "400":
            description: Invalid ID supplied
          "404":
            description: Pet not found
    /store/inventory:
      get:
        tags:
          - store
        summary: Returns pet inventories by status
        description: Returns a map of status codes to quantities
        operationId: getInventory
        responses:
          "200":
            description: successful operation
            content:
              application/json:
                schema:
                  type: object
                  additionalProperties:
                    type: integer
                    format: int32
    /store/order:
      post:
        tags:
          - store
        summary: Place an order for a pet
        description: ""
        operationId: placeOrder
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
          description: order placed for purchasing the pet
          required: true
        responses:
          "200":
            description: successful operation
            content:
              application/xml:
                schema:
                  $ref: "#/components/schemas/Order"
              application/json:
                schema:
                  $ref: "#/components/schemas/Order"
          "400":
            description: Invalid Order
    "/store/order/{orderId}":
      get:
        tags:
          - store
        summary: Find purchase order by ID
        description: For valid response try integer IDs with value >= 1 and <= 10. Other
          values will generated exceptions
        operationId: getOrderById
        parameters:
          - name: orderId
            in: path
            description: ID of pet that needs to be fetched
            required: true
            schema:
              type: integer
              format: int64
              minimum: 1
              maximum: 10
        responses:
          "200":
            description: successful operation
            content:
              application/xml:
                schema:
                  $ref: "#/components/schemas/Order"
              application/json:
                schema:
                  $ref: "#/components/schemas/Order"
          "400":
            description: Invalid ID supplied
          "404":
            description: Order not found
      delete:
        tags:
          - store
        summary: Delete purchase order by ID
        description: For valid response try integer IDs with positive integer value. Negative
          or non-integer values will generate API errors
        operationId: deleteOrder
        parameters:
          - name: orderId
            in: path
            description: ID of the order that needs to be deleted
            required: true
            schema:
              type: integer
              format: int64
              minimum: 1
        responses:
          "400":
            description: Invalid ID supplied
          "404":
            description: Order not found
    /user:
      post:
        tags:
          - user
        summary: Create user
        description: This can only be done by the logged in user.
        operationId: createUser
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: Created user object
          required: true
        responses:
          default:
            description: successful operation
    /user/createWithArray:
      post:
        tags:
          - user
        summary: Creates list of users with given input array
        description: ""
        operationId: createUsersWithArrayInput
        requestBody:
          $ref: "#/components/requestBodies/UserArray"
        responses:
          default:
            description: successful operation
    /user/createWithList:
      post:
        tags:
          - user
        summary: Creates list of users with given input array
        description: ""
        operationId: createUsersWithListInput
        requestBody:
          $ref: "#/components/requestBodies/UserArray"
        responses:
          default:
            description: successful operation
    /user/login:
      post:
        tags:
          - user
        summary: Logs user into the system
        description: ""
        operationId: loginUser
        requestBody:
          $ref: "#/components/requestBodies/LoginArray"
        responses:
          "202":
            description: successful operation
            headers:
              X-Rate-Limit:
                description: calls per hour allowed by the user
                schema:
                  type: integer
                  format: int32
              X-Expires-After:
                description: date in UTC when token expires
                schema:
                  type: string
                  format: date-time
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Token"
          "422":
            description: Invalid username/password supplied
    /user/logout:
      get:
        tags:
          - user
        summary: Logs out current logged in user session
        description: ""
        operationId: logoutUser
        security:
          - bearerAuth: []
        responses:
          default:
            description: successful operation
    "/user/me":
      get:
        tags:
          - user
        summary: Get current user
        description: "Get information about current authenticated user"
        operationId: getMe
        security:
          - bearerAuth: []
        responses:
          "200":
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/User"
          "400":
            description: Invalid token
      put:
        tags:
          - user
        summary: Update user
        description: Change information about currently authenticated user. To update avatar, you need to pass base64 encode file.
        operationId: updateUser
        security:
          - bearerAuth: []
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: Updated user object
          required: true
        responses:
          "422":
            description: Invalid data provided
    "/user/{username}":
      get:
        tags:
          - user
        summary: Get user by user name
        description: ""
        operationId: getUserByName
        parameters:
          - name: username
            in: path
            description: "The name that needs to be fetched. Use user1 for testing. "
            required: true
            schema:
              type: string
        responses:
          "200":
            description: successful operation
            content:
              application/xml:
                schema:
                  $ref: "#/components/schemas/User"
              application/json:
                schema:
                  $ref: "#/components/schemas/User"
          "400":
            description: Invalid username supplied
          "404":
            description: User not found
      delete:
        tags:
          - user
        summary: Delete user
        description: This can only be done by the logged in user.
        operationId: deleteUser
        parameters:
          - name: username
            in: path
            description: The name that needs to be deleted
            required: true
            schema:
              type: string
        responses:
          "400":
            description: Invalid username supplied
          "404":
            description: User not found
  externalDocs:
    description: Find out more about EasyDocs
    url: https://sergeyem.ru
  servers:
    - url: https://docs.sergeyem.ru/api/v1
  components:
    securitySchemes:
      bearerAuth:
        type: http
        scheme: bearer
        bearerFormat: Token
    requestBodies:
      UserArray:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/User"
        description: List of user object
        required: true
      LoginArray:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/LoginData"
        description: Data for login
        required: true
      Folder:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: New Folder
                description:
                  type: string
                  example: Some description for folder
                parent_id:
                  type: number
                  example: 1
                is_private:
                  type: boolean
                  example: false
          application/xml:
            schema:
              $ref: "#/components/schemas/Pet"
        description: Pet object that needs to be added to the store
        required: true
      Pet:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
          application/xml:
            schema:
              $ref: "#/components/schemas/Pet"
        description: Pet object that needs to be added to the store
        required: true
    schemas:
      Token:
        type: object
        properties:
          accessToken:
            type: string
          plainTextToken:
            type: string
        xml:
          name: Token
      LoginData:
        type: object
        properties:
          email:
            type: string
            example: "emelyanov86@km.ru"
          password:
            type: string
            example: "pass123"
          token_name:
            type: string
            example: "Insomnia"
        xml:
          name: Token
      Order:
        type: object
        properties:
          id:
            type: integer
            format: int64
          petId:
            type: integer
            format: int64
          quantity:
            type: integer
            format: int32
          shipDate:
            type: string
            format: date-time
          status:
            type: string
            description: Order Status
            enum:
              - placed
              - approved
              - delivered
          complete:
            type: boolean
            default: false
        xml:
          name: Order
      User:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
            example: "Sergey"
          email:
            type: string
            example: "user@mail.ru"
          password:
            type: string
          group_id:
            type: number
            example: 2
          notifications_count:
            type: number
            example: 2
          tokens_count:
            type: number
            example: 1
          avatar:
            type: string
            example: "avatar.png"
          created_at:
            type: string
            example: "2023-05-09 13:18:18"
          updated_at:
            type: string
            example: "2023-05-09 13:18:18"
        xml:
          name: User
      Category:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
        xml:
          name: Category
      Tag:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
        xml:
          name: Tag
      Group:
        type: object
        required:
          - name
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
            example: Main
          description:
            type: string
            example: This is main group
          users:
            type: array
            items:
              $ref: "#/components/schemas/User"
        xml:
          name: Group
      Folder:
        type: object
        required:
          - name
          - user_id
        properties:
          id:
            type: integer
            format: int64
          children:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
          name:
            type: string
            example: Main folder
          description:
            type: string
            example: This is folder description
          user_id:
            type: number
            example: 1
          group_id:
            type: number
            example: 1
          sequence:
            type: number
            example: 1
          is_private:
            type: boolean
            example: false
          parent_id:
            type: number
            example: 2
          created_at:
            type: string
            example: "2023-06-05 12:12:15"
          updated_at:
            type: string
            example: "2023-06-05 12:12:15"
        xml:
          name: Folder
      Pet:
        type: object
        required:
          - name
          - photoUrls
        properties:
          id:
            type: integer
            format: int64
          category:
            $ref: "#/components/schemas/Category"
          name:
            type: string
            example: doggie
          photoUrls:
            type: array
            xml:
              name: photoUrl
              wrapped: true
            items:
              type: string
          tags:
            type: array
            xml:
              name: tag
              wrapped: true
            items:
              $ref: "#/components/schemas/Tag"
          status:
            type: string
            description: pet status in the store
            enum:
              - available
              - pending
              - sold
        xml:
          name: Pet
      ApiResponse:
        type: object
        properties:
          code:
            type: integer
            format: int32
          type:
            type: string
          message:
            type: string
contentType: yaml
